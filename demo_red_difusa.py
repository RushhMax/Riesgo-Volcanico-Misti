"""
DEMOSTRACI√ìN COMPLETA DE RED BAYESIANA DIFUSA VERDADERA
Sistema de Evaluaci√≥n de Riesgo Volc√°nico del Misti

Esta demostraci√≥n muestra las capacidades completas del sistema de Red Bayesiana Difusa
implementado para la evaluaci√≥n de riesgo volc√°nico, incluyendo:
- Inferencia con n√∫meros difusos triangulares
- Propagaci√≥n de incertidumbre
- M√∫ltiples escenarios de evaluaci√≥n
- An√°lisis de sensibilidad
"""

import numpy as np
import matplotlib.pyplot as plt
from main import TrueFuzzyBayesianNetwork
from red_bayesiana.triangular import TriangularFuzzyProbability

def demo_escenarios_volcanicos():
    """Demostraci√≥n con m√∫ltiples escenarios volc√°nicos"""
    print("üåã" * 60)
    print(" " * 15 + "DEMOSTRACI√ìN DE RED BAYESIANA DIFUSA VERDADERA")
    print(" " * 20 + "Sistema de Riesgo Volc√°nico del Misti")
    print("üåã" * 60)
    
    # Crear la red
    fbn = TrueFuzzyBayesianNetwork()
    
    # Definir escenarios de prueba
    escenarios = {
        "üü¢ ESCENARIO TRANQUILO": {
            'sismicidad': 2,        # Baja actividad s√≠smica
            'gases': 500,           # Emisiones normales
            'deformacion': 1,       # Sin deformaci√≥n
            'historia': 1,          # Poca actividad hist√≥rica
            'densidad': 5000,       # Poblaci√≥n media
            'preparacion': 4,       # Buena preparaci√≥n
            'proximidad': 15,       # Alejado del volc√°n
            'evacuacion': 8         # Planes de evacuaci√≥n buenos
        },
        
        "üü° ESCENARIO MODERADO": {
            'sismicidad': 8,        # Actividad s√≠smica media
            'gases': 2500,          # Emisiones elevadas
            'deformacion': 15,      # Deformaci√≥n leve
            'historia': 5,          # Actividad hist√≥rica media
            'densidad': 12000,      # Poblaci√≥n alta
            'preparacion': 2,       # Preparaci√≥n baja
            'proximidad': 8,        # Relativamente cerca
            'evacuacion': 4         # Planes limitados
        },
        
        "üî¥ ESCENARIO CR√çTICO": {
            'sismicidad': 18,       # Alta actividad s√≠smica
            'gases': 4500,          # Emisiones muy altas
            'deformacion': 40,      # Deformaci√≥n significativa
            'historia': 9,          # Alta actividad hist√≥rica
            'densidad': 25000,      # Poblaci√≥n muy densa
            'preparacion': 1,       # Muy poca preparaci√≥n
            'proximidad': 3,        # Muy cerca del volc√°n
            'evacuacion': 2         # Evacuaci√≥n inadecuada
        },
        
        "‚ö° ESCENARIO MIXTO": {
            'sismicidad': 12,       # Actividad media-alta
            'gases': 1800,          # Emisiones moderadas
            'deformacion': 25,      # Deformaci√≥n media
            'historia': 6,          # Historia media
            'densidad': 8000,       # Poblaci√≥n media-baja
            'preparacion': 3,       # Preparaci√≥n media
            'proximidad': 12,       # Distancia media
            'evacuacion': 6         # Evacuaci√≥n moderada
        }
    }
    
    resultados = {}
    
    for nombre_escenario, evidencia in escenarios.items():
        print(f"\n{nombre_escenario}")
        print("=" * len(nombre_escenario))
        
        # Mostrar par√°metros de entrada
        print("üìã Par√°metros de entrada:")
        for var, val in evidencia.items():
            unidad = {
                'sismicidad': 'eventos/d√≠a',
                'gases': 'ppm',
                'deformacion': 'mm',
                'historia': '/10',
                'densidad': 'hab/km¬≤',
                'preparacion': '/5',
                'proximidad': 'km',
                'evacuacion': '/10'
            }
            print(f"   ‚Ä¢ {var}: {val} {unidad.get(var, '')}")
        
        # Realizar inferencia
        fuzzy_result = fbn.fuzzy_inference(evidencia, 'riesgo', verbose=False)
        
        # Calcular valor crisp
        crisp_risk = fbn.defuzzify_distribution(fuzzy_result, 'centroid')
        resultados[nombre_escenario] = {
            'fuzzy_distribution': fuzzy_result,
            'crisp_value': crisp_risk,
            'evidence': evidencia
        }
        
        # Mostrar resultados
        print(f"\nüéØ RESULTADOS DE RIESGO:")
        print(f"   Distribuci√≥n difusa:")
        for estado, prob_difusa in fuzzy_result.items():
            crisp_prob = prob_difusa.defuzzify_centroid()
            print(f"     ‚Ä¢ {estado}: {prob_difusa} ‚Üí {crisp_prob:.3f}")
        
        print(f"   Valor defuzzificado: {crisp_risk:.2f}/10")
        
        # Clasificaci√≥n del riesgo
        if crisp_risk <= 3:
            nivel = "üü¢ RIESGO BAJO"
            accion = "Monitoreo rutinario"
        elif crisp_risk <= 6:
            nivel = "üü° RIESGO MEDIO"
            accion = "Alerta y preparaci√≥n"
        else:
            nivel = "üî¥ RIESGO ALTO"
            accion = "Evacuaci√≥n recomendada"
        
        print(f"   Clasificaci√≥n: {nivel}")
        print(f"   Acci√≥n recomendada: {accion}")
    
    return resultados

def analisis_sensibilidad():
    """An√°lisis de sensibilidad de variables clave"""
    print("\n" + "üî¨" * 60)
    print(" " * 20 + "AN√ÅLISIS DE SENSIBILIDAD")
    print("üî¨" * 60)
    
    fbn = TrueFuzzyBayesianNetwork()
    
    # Configuraci√≥n base
    evidencia_base = {
        'sismicidad': 10,
        'gases': 2000,
        'deformacion': 15,
        'historia': 5,
        'densidad': 10000,
        'preparacion': 3,
        'proximidad': 8,
        'evacuacion': 5
    }
    
    # Variables a analizar
    variables_analisis = {
        'sismicidad': np.arange(1, 20, 3),
        'gases': np.arange(500, 5000, 500),
        'deformacion': np.arange(0, 50, 5),
        'proximidad': np.arange(2, 20, 2)
    }
    
    print(f"üìä Configuraci√≥n base: {evidencia_base}")
    
    for variable, valores in variables_analisis.items():
        print(f"\nüîç An√°lisis de sensibilidad para '{variable}':")
        
        riesgos = []
        for valor in valores:
            evidencia_temp = evidencia_base.copy()
            evidencia_temp[variable] = valor
            
            fuzzy_result = fbn.fuzzy_inference(evidencia_temp, 'riesgo', verbose=False)
            crisp_risk = fbn.defuzzify_distribution(fuzzy_result, 'centroid')
            riesgos.append(crisp_risk)
            
            print(f"   {variable}={valor} ‚Üí Riesgo={crisp_risk:.2f}")
        
        # Calcular sensibilidad
        varianza = np.var(riesgos)
        rango = max(riesgos) - min(riesgos)
        
        print(f"   üìà Varianza del riesgo: {varianza:.3f}")
        print(f"   üìè Rango de variaci√≥n: {rango:.3f}")

def demo_aritmetica_difusa():
    """Demostraci√≥n de operaciones aritm√©ticas con n√∫meros difusos"""
    print("\n" + "üßÆ" * 60)
    print(" " * 15 + "DEMOSTRACI√ìN DE ARITM√âTICA DIFUSA")
    print("üßÆ" * 60)
    
    # Crear n√∫meros difusos triangulares
    print("üî¢ Creando n√∫meros difusos triangulares:")
    
    amenaza_alta = TriangularFuzzyProbability(0.6, 0.75, 0.9)
    vulnerabilidad_media = TriangularFuzzyProbability(0.3, 0.5, 0.6)
    
    print(f"   Amenaza Alta: {amenaza_alta}")
    print(f"   Vulnerabilidad Media: {vulnerabilidad_media}")
    
    # Operaciones aritm√©ticas
    print(f"\n‚ûï Suma difusa:")
    suma = amenaza_alta + vulnerabilidad_media
    print(f"   {amenaza_alta} + {vulnerabilidad_media} = {suma}")
    
    print(f"\n‚úñÔ∏è Multiplicaci√≥n difusa:")
    producto = amenaza_alta * vulnerabilidad_media
    print(f"   {amenaza_alta} * {vulnerabilidad_media} = {producto}")
    
    # Defuzzificaci√≥n
    print(f"\nüéØ Defuzzificaci√≥n:")
    print(f"   Amenaza (centroide): {amenaza_alta.defuzzify_centroid():.3f}")
    print(f"   Vulnerabilidad (centroide): {vulnerabilidad_media.defuzzify_centroid():.3f}")
    print(f"   Producto (centroide): {producto.defuzzify_centroid():.3f}")
    
    # Operaciones de membres√≠a
    print(f"\nüéØ An√°lisis de membres√≠a:")
    valor_test = 0.7
    print(f"   Membres√≠a de {valor_test} en Amenaza Alta: {amenaza_alta.membership(valor_test):.3f}")
    print(f"   Membres√≠a de {valor_test} en Vulnerabilidad Media: {vulnerabilidad_media.membership(valor_test):.3f}")
    
    # Alpha-cuts
    print(f"\n‚úÇÔ∏è Alpha-cuts (Œ±=0.5):")
    alpha = 0.5
    cut_amenaza = amenaza_alta.alpha_cut(alpha)
    cut_vulnerabilidad = vulnerabilidad_media.alpha_cut(alpha)
    print(f"   Amenaza Œ±-cut: {cut_amenaza}")
    print(f"   Vulnerabilidad Œ±-cut: {cut_vulnerabilidad}")

def demo_comparacion_metodos():
    """Comparaci√≥n entre m√©todos de defuzzificaci√≥n"""
    print("\n" + "‚öñÔ∏è" * 60)
    print(" " * 15 + "COMPARACI√ìN DE M√âTODOS DE DEFUZZIFICACI√ìN")
    print("‚öñÔ∏è" * 60)
    
    fbn = TrueFuzzyBayesianNetwork()
    
    # Evidencia de prueba
    evidencia = {
        'sismicidad': 15,
        'gases': 3500,
        'deformacion': 25,
        'historia': 7,
        'densidad': 15000,
        'preparacion': 2,
        'proximidad': 6,
        'evacuacion': 3
    }
    
    print(f"üìã Evidencia: {evidencia}")
    
    # Realizar inferencia
    fuzzy_result = fbn.fuzzy_inference(evidencia, 'riesgo', verbose=False)
    
    print(f"\nüé≤ Distribuci√≥n difusa obtenida:")
    for estado, prob in fuzzy_result.items():
        print(f"   {estado}: {prob}")
    
    # Comparar m√©todos de defuzzificaci√≥n
    metodos = ['centroid', 'mean_of_max']
    
    print(f"\nüéØ Comparaci√≥n de m√©todos de defuzzificaci√≥n:")
    for metodo in metodos:
        valor_crisp = fbn.defuzzify_distribution(fuzzy_result, metodo)
        print(f"   {metodo}: {valor_crisp:.3f}")

def main():
    """Funci√≥n principal de demostraci√≥n"""
    try:
        # Ejecutar todas las demostraciones
        print("üöÄ Iniciando demostraci√≥n completa del sistema...")
        
        # 1. Escenarios volc√°nicos
        resultados = demo_escenarios_volcanicos()
        
        # 2. An√°lisis de sensibilidad
        analisis_sensibilidad()
        
        # 3. Aritm√©tica difusa
        demo_aritmetica_difusa()
        
        # 4. Comparaci√≥n de m√©todos
        demo_comparacion_metodos()
        
        # Resumen final
        print("\n" + "üèÅ" * 60)
        print(" " * 20 + "RESUMEN FINAL")
        print("üèÅ" * 60)
        
        print("‚úÖ Sistema de Red Bayesiana Difusa implementado exitosamente")
        print("‚úÖ Inferencia con n√∫meros difusos triangulares funcionando")
        print("‚úÖ M√∫ltiples escenarios evaluados correctamente")
        print("‚úÖ Operaciones aritm√©ticas difusas verificadas")
        print("‚úÖ M√©todos de defuzzificaci√≥n comparados")
        
        print(f"\nüìä Resumen de escenarios evaluados:")
        for escenario, datos in resultados.items():
            riesgo = datos['crisp_value']
            if riesgo <= 3:
                estado = "üü¢ BAJO"
            elif riesgo <= 6:
                estado = "üü° MEDIO"
            else:
                estado = "üî¥ ALTO"
            print(f"   {escenario}: {riesgo:.2f} ({estado})")
        
        print(f"\nüéØ El sistema est√° listo para uso operacional!")
        
    except Exception as e:
        print(f"‚ùå Error en la demostraci√≥n: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
